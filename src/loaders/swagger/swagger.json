{
  "openapi": "3.0.0",
  "info": {
    "title": "Users and products Api",
    "description": "## This is an api for users and products",
    "version": "1.0.3",
    "contact": {
      "email": "jprogramgm@gmail.com"
    }
  },

  "servers": [
    {
      "url": "http://localhost:3000/api/v1",
      "description": "Desarrollo"
    },
    {
      "url": "https://node-08-users-joaquin.herokuapp.com/api/v1",
      "description": "ProducciÃ³n"
    }
  ],
  "tags": [
    {
      "name": "users",
      "description": "Operations about users."
    },
    {
      "name": "login",
      "description": "Users login"
    }
  ],
  "paths": {
    "/auth/login": {
      "post": {
        "tags": ["login"],
        "summary": "User login.",
        "description": "Service for users login.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "The user email",
                    "example": "admin@user.com"
                  },
                  "password": {
                    "type": "string",
                    "description": "The user password",
                    "example": "administrator_123456"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON object with data and status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status",
                      "example": "OK"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "type": "string",
                          "description": "The user's token",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxOWQ2MzczYWI2ZjU5MDZjMDliZjg5MyIsImlhdCI6MTY0MDc1Njg4NywiZXhwIjoxNjQwODQzMjg3fQ.dMatZyTPx8aaCP18SqGKq6anWdfOnr8Ez_jEPcHxfRs"
                        },
                        "user": {
                          "type": "string",
                          "description": "The name of the user",
                          "example": "Admin"
                        },
                        "role": {
                          "type": "string",
                          "description": "The user's role",
                          "example": "ADMIN_ROLE"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            }
          },
          "401": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorDB"
                }
              }
            }
          }
        }
      }
    },
    "/users/": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "filter[name]",
            "description": "filter users by name.",
            "required": false,
            "Schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[lastName]",
            "description": "filter users by last name.",
            "required": false,
            "Schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[birthdate]",
            "description": "filter users by birthdate.",
            "required": false,
            "Schema": {
              "type": "date"
            }
          },
          {
            "in": "query",
            "name": "options[limit]",
            "description": "The limit of users displayed (Use it for pagination).",
            "required": false,
            "Schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "options[offset]",
            "description": "index to start the search of users (Use it for pagination).",
            "required": false,
            "Schema": {
              "type": "string"
            }
          }
        ],
        "tags": ["users"],
        "summary": "Return a list of existing users",
        "description": "# Service for retrieve users by parameters with pagination\n - For the pagination, you need send offset and limit parameters.",
        "responses": {
          "200": {
            "description": "A JSON Array of users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorDB"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["users"],
        "summary": "Create a new user.",
        "description": "# Service for create a new user\n - birthday format --> MM-DD-YYYY.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateAndUpdate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created."
          },
          "400": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            }
          },
          "401": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorDB"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": ["users"],
        "summary": "Return an existing user providing an existing id.",
        "description": "# Service for retrieve a specific user data",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the user you want to see.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON Array of users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            }
          },
          "401": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorDB"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["users"],
        "summary": "Update an existing user by providing the correct id.",
        "description": "# Service for update a user.\n - birthday format --> MM-DD-YYYY.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the user that needs to be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateAndUpdate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            }
          },
          "401": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorDB"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["users"],
        "summary": "Delete an existing user by providing the correct id.",
        "description": "# Service for delete a specific user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the user that needs to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted."
          },
          "400": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            }
          },
          "401": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorDB"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "role": {
            "description": "the user role",
            "type": "string",
            "example": "Default value: USER_ROLE"
          },
          "enable": {
            "description": "User is enabled?",
            "type": "boolean",
            "example": "true"
          },
          "_id": {
            "description": "The user id.",
            "type": "string",
            "example": "25acd789def..."
          },
          "name": {
            "description": "The user name.",
            "type": "string",
            "example": "JoaquÃ­n"
          },
          "lastName": {
            "description": "The user last name.",
            "type": "string",
            "example": "Aliotta"
          },
          "email": {
            "description": "The user email.",
            "type": "string",
            "example": "example@mail.com"
          },
          "password": {
            "description": "The user password.",
            "type": "string",
            "example": "$2b$10$om4Aa5l2.QdSip87EdJM"
          },
          "birthdate": {
            "description": "The user birthdate. (YYYY-MM-DD) ",
            "type": "date",
            "example": "1989-12-31"
          },
          "createdAt": {
            "description": "date of the user creation. (YYYY-MM-DD)",
            "type": "date",
            "example": "1989-12-31"
          },
          "updatedAt": {
            "description": "date of the user update. (YYYY-MM-DD)",
            "type": "date",
            "example": "1989-12-31"
          }
        }
      },
      "UserCreateAndUpdate": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "name": {
            "description": "The user name.",
            "type": "string",
            "example": "JoaquÃ­n"
          },
          "lastName": {
            "description": "The user last name.",
            "type": "string",
            "example": "Aliotta"
          },
          "email": {
            "description": "The user email.",
            "type": "string",
            "example": "example@email.com"
          },
          "password": {
            "description": "The user password.",
            "type": "string",
            "example": "Your password"
          },
          "birthdate": {
            "description": "The user birthdate.",
            "type": "date",
            "example": "12/31/1989"
          }
        }
      },
      "RequestError": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Error code",
            "type": "integer",
            "example": "400"
          },
          "message": {
            "description": "Error message",
            "type": "string",
            "example": "Validation Errors: Invalid id, invalid email, etc"
          }
        }
      },
      "ErrorDB": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Error code",
            "type": "integer",
            "example": "500"
          },
          "message": {
            "description": "Error message",
            "type": "string",
            "example": "Search failed: description of the error"
          }
        }
      },
      "AuthenticationError": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Error code",
            "type": "integer",
            "example": "401"
          },
          "message": {
            "description": "Error message",
            "type": "string",
            "example": "Authentication failed, .... description ...."
          }
        }
      },
      "AuthorizationError": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Error code",
            "type": "integer",
            "example": "403"
          },
          "message": {
            "description": "Error message",
            "type": "string",
            "example": "Authorization failed! User without privileges."
          }
        }
      }
    },
    "securitySchemes": {
      "JWT": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    }
  },
  "security": [{ "JWT": [] }]
}
